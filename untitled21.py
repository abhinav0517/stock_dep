# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fk_hm8jCvde8bhu2qITJtvqdv8Az1C82
"""

import streamlit as st
import pandas as pd
import numpy as np
from statsmodels.tsa.statespace.sarimax import SARIMAX
import datetime

# Load Dataset
df = pd.read_csv("AAPL.csv", parse_dates=["Date"], index_col="Date")  # Ensure file is in your repo
df = df.asfreq('B')  # Ensure business day frequency
df['Close'] = df['Close'].ffill()  # Fill missing values

# Train SARIMA Model
train_size = int(len(df) * 0.8)
train = df[:train_size]

sarima_model = SARIMAX(train['Close'], order=(5,1,0), seasonal_order=(1,1,1,12),
                        enforce_stationarity=False, enforce_invertibility=False)
sarima_result = sarima_model.fit(disp=False)

# Forecast Next 30 Days
future_forecast = sarima_result.get_forecast(steps=30)
forecast_mean = future_forecast.predicted_mean

# Generate Future Dates
future_dates = pd.date_range(start=df.index[-1] + pd.Timedelta(days=1), periods=30, freq='B')
forecast_df = pd.DataFrame({'Predicted Price': forecast_mean.values}, index=future_dates)

# Streamlit UI
st.title("üìà Apple Stock Price Prediction (SARIMA Model)")

# User Input for Date Selection
selected_date = st.date_input("Select a Date (From 2019-12-30 to Next 30 Days):",
                              min_value=datetime.date(2019, 12, 30),
                              max_value=future_dates[-1].date())

# ‚úÖ Convert selected_date to Pandas Timestamp for correct comparison
selected_date = pd.Timestamp(selected_date)

# Predict for the Selected Date
if selected_date in forecast_df.index:
    predicted_price = forecast_df.loc[selected_date, 'Predicted Price']
    st.success(f"üìÖ Predicted Closing Price on {selected_date.date()}: **${predicted_price:.2f}**")
else:
    st.warning("‚ö†Ô∏è Please select a valid date within the given range.")

